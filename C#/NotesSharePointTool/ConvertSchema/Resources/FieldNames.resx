<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllowMultipleValues" xml:space="preserve">
    <value>複数選択できる</value>
    <comment>Field</comment>
  </data>
  <data name="Choices" xml:space="preserve">
    <value>選択肢</value>
    <comment>Field</comment>
  </data>
  <data name="CommonCategory" xml:space="preserve">
    <value>一般</value>
    <comment>Category</comment>
  </data>
  <data name="Computed" xml:space="preserve">
    <value>計算列</value>
    <comment>Field</comment>
  </data>
  <data name="CurrencyLocaleId" xml:space="preserve">
    <value>通貨の表示形式</value>
    <comment>Field</comment>
  </data>
  <data name="Decimals" xml:space="preserve">
    <value>数点以下桁数</value>
    <comment>Field</comment>
  </data>
  <data name="DefaultValue" xml:space="preserve">
    <value>デフォルト値</value>
    <comment>Field</comment>
  </data>
  <data name="DefaultValueFormula" xml:space="preserve">
    <value>デフォルト値(数式)</value>
    <comment>Field</comment>
  </data>
  <data name="Description" xml:space="preserve">
    <value>説明</value>
    <comment>Field</comment>
  </data>
  <data name="DisplayFormat" xml:space="preserve">
    <value>日付と時刻の形式</value>
    <comment>Field</comment>
  </data>
  <data name="EditFormat" xml:space="preserve">
    <value>選択肢の種別</value>
    <comment>Field</comment>
  </data>
  <data name="FillInChoice" xml:space="preserve">
    <value>選択肢追加を許可</value>
    <comment>Field</comment>
  </data>
  <data name="Hidden" xml:space="preserve">
    <value>非表示</value>
    <comment>Field</comment>
  </data>
  <data name="InputValidationFormula" xml:space="preserve">
    <value>入力の確認式</value>
    <comment>Field</comment>
  </data>
  <data name="IsConvert" xml:space="preserve">
    <value>変換対象</value>
    <comment>Field</comment>
  </data>
  <data name="keywordUIType" xml:space="preserve">
    <value>変換元選択肢の種別</value>
    <comment>Field</comment>
  </data>
  <data name="MaximumValue" xml:space="preserve">
    <value>最大値</value>
    <comment>Field</comment>
  </data>
  <data name="MaxLength" xml:space="preserve">
    <value>最大文字数</value>
    <comment>Field</comment>
  </data>
  <data name="MinimumValue" xml:space="preserve">
    <value>最小値</value>
    <comment>Field</comment>
  </data>
  <data name="Name" xml:space="preserve">
    <value>名前</value>
    <comment>Field</comment>
  </data>
  <data name="NumberOfLines" xml:space="preserve">
    <value>編集対象の行数</value>
    <comment>Field</comment>
  </data>
  <data name="OtherCategory" xml:space="preserve">
    <value>制御</value>
    <comment>Category</comment>
  </data>
  <data name="Percentage" xml:space="preserve">
    <value>パーセンテージ</value>
    <comment>Field</comment>
  </data>
  <data name="ReadOnlyField" xml:space="preserve">
    <value>読み取り専用</value>
    <comment>Field</comment>
  </data>
  <data name="ReferCategory" xml:space="preserve">
    <value>変換元情報</value>
    <comment>Category</comment>
  </data>
  <data name="Required" xml:space="preserve">
    <value>必須</value>
    <comment>Field</comment>
  </data>
  <data name="RichText" xml:space="preserve">
    <value>リッチテキスト</value>
    <comment>Field</comment>
  </data>
  <data name="SelectionMode" xml:space="preserve">
    <value>選択種別</value>
    <comment>Field</comment>
  </data>
  <data name="SourceType" xml:space="preserve">
    <value>変換元種別</value>
    <comment>Field</comment>
  </data>
  <data name="TargetType" xml:space="preserve">
    <value>変換先種別</value>
    <comment>Field</comment>
  </data>
  <data name="Title" xml:space="preserve">
    <value>タイトル</value>
    <comment>Field</comment>
  </data>
  <data name="ValidationCaterory" xml:space="preserve">
    <value>検証</value>
    <comment>Category</comment>
  </data>
  <data name="ValidationFormula" xml:space="preserve">
    <value>数式</value>
    <comment>Field</comment>
  </data>
  <data name="ValidationFormulaDesc" xml:space="preserve">
    <value>データ検証に使用する式を指定してください。検証に合格するには、式の評価が TRUE になる必要があります。
例: 列の名前が "Company Name" の場合、有効な式は [Company Name]="My Company" となります。</value>
    <comment>Description</comment>
  </data>
  <data name="ValidationMessage" xml:space="preserve">
    <value>メッセージ</value>
    <comment>Field</comment>
  </data>
  <data name="ValidationMessageDesc" xml:space="preserve">
    <value>この列の値を有効と判断するために必要な条件の説明を入力してください。</value>
    <comment>Description</comment>
  </data>
</root>