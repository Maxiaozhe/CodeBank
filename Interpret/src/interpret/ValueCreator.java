/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interpret;

import java.awt.*;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Locale;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JRadioButtonMenuItem;

/**
 *
 * @author xma
 */
public class ValueCreator extends javax.swing.JPanel {

    private Class<?> valueType = null;
    private Object value = null;

    /**
     * Creates new form ValueCreator
     */
    public ValueCreator(Class<?> valueType, Object paramValue) {
        this.valueType = valueType;
        this.value = paramValue;
        initComponents();
        initControls();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());
        add(jTextField1, java.awt.BorderLayout.CENTER);

        jButton1.setText("...");
        jButton1.setMinimumSize(new java.awt.Dimension(24, 21));
        jButton1.setPreferredSize(new java.awt.Dimension(24, 21));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, java.awt.BorderLayout.LINE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.jPopupMenu1.show(this, this.jButton1.getX(), this.jButton1.getY());
        return;
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the valueType
     */
    public Class<?> getValueType() {
        return valueType;
    }

    /**
     * @param valueType the valueType to set
     */
    public void setValueType(Class<?> valueType) {
        this.valueType = valueType;
    }

    /**
     * @return the value
     */
    public Object getValue() {
        if (Utility.isSampleType(this.valueType.getName())) {
            this.value = Utility.getSampleTypeInstance(this.valueType.getName(), this.jTextField1.getText());
        }
        return value;
    }

    /**
     * @param value the value to set
     */
    public void setValue(Object value) {
        this.value = value;
    }

    private void initControls() {
        if (this.value != null) {
            if (value.getClass().isArray()) {
                this.jTextField1.setText(Utility.arrayToString(value));
            } else {
                this.jTextField1.setText(this.value.toString());
            }
        }
        if (Utility.isSampleType(this.valueType.getName())) {
            this.jButton1.setVisible(false);
        } else {
            initPopMenu();
        }
    }

    private void menuActionPerformed(java.awt.event.ActionEvent evt) {

        Constructor<?>[] constrs = this.valueType.getDeclaredConstructors();
        for (Constructor constr : constrs) {
            if (constr.toGenericString().equals(evt.getActionCommand())) {
                try {
                    if (constr.getParameterCount() > 0) {
                        NewInstance inst = new NewInstance(Utility.getParentWindow(this), this.valueType, constr);
                        inst.showNameInputArea(false);
                        Utility.displayScreenCenter(inst, 400, 380);
                        inst.setVisible(true);
                        if (!inst.isCanceled()) {
                            this.value = inst.getCreatedObject();
                        }
                    } else {
                        if (!constr.isAccessible()) {
                            constr.setAccessible(true);
                        }
                        this.value = constr.newInstance();
                    }
                    this.jTextField1.setText(this.value.toString());
                } catch (SecurityException | IllegalAccessException ex) {
                    JOptionPane.showMessageDialog(this, String.format("作成権限がありません。%s(%s)", ex.getMessage(), ex.toString()));
                } catch (InstantiationException ex) {
                    JOptionPane.showMessageDialog(this, String.format("インスタンスの作成ができません。%s(%s)", ex.getMessage(), ex.toString()));
                } catch (IllegalArgumentException ex) {
                    JOptionPane.showMessageDialog(this, String.format("コンストラクタのパラメタが間違います。%n %s(%s)", ex.getMessage(), ex.toString()));
                } catch (InvocationTargetException ex) {
                    JOptionPane.showMessageDialog(this, String.format("%s(%s)", ex.getMessage(), ex.toString()));
                }
                return;
            }
        }

    }
    
      private void menuSelectObjectPerformed(java.awt.event.ActionEvent evt) {
            this.value = Utility.getObjects().get( evt.getActionCommand());
            this.jTextField1.setText(this.value.toString());
      }

    private void initPopMenu() {
        //初期化メソッド一覧
        JMenuItem mnuitem = null;
        JMenu mnuGroup = null;
        //新規作成
        mnuGroup = new JMenu();
        mnuGroup.setText("新規作成");
        Constructor[] constrs = this.valueType.getDeclaredConstructors();
        for (Constructor constr : constrs) {
            mnuitem = new JMenuItem();
            mnuitem.setText(constr.toGenericString());
            mnuitem.setActionCommand(constr.toGenericString());
            mnuitem.addActionListener(this::menuActionPerformed);
            mnuGroup.add(mnuitem);
        }
        this.jPopupMenu1.add(mnuGroup);
        //既存インスタンスを選択
        mnuGroup = new JMenu();
        mnuGroup.setText("選択");
        TreeMap<String, Object> objects = Utility.getObjects();
        for (String key : objects.keySet()) {
            Object obj = objects.get(key);
            Class<?> objType = obj.getClass();
            boolean canSelect = false;
            if (objType == this.valueType) {
                canSelect = true;
            } else if (this.valueType.isArray() && objType.isArray()) {
                if (this.valueType.getComponentType().isAssignableFrom(objType.getComponentType())) {
                    canSelect = true;
                }
            } else if (this.valueType.isAssignableFrom(objType)) {
                canSelect = true;
            }
            if (canSelect) {
                mnuitem = new JMenuItem();
                mnuitem.setText(key);
                mnuitem.setActionCommand(key);
                mnuitem.addActionListener(this::menuSelectObjectPerformed);
                mnuGroup.add(mnuitem);
            }
            this.jPopupMenu1.add(mnuGroup);
        }

    }

}


