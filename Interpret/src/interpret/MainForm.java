/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interpret;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.lang.reflect.*;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.tree.*;

/**
 *
 * @author xma
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        initControls();
    }

    private DefaultMutableTreeNode localObject = new DefaultMutableTreeNode("root");
    ;
    private DefaultTreeModel treemodel = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jToolBar1 = new javax.swing.JToolBar();
        txtTypeName = new javax.swing.JTextField();
        btnNewClass = new javax.swing.JButton();
        btnNewInstance = new javax.swing.JButton();
        btnNewArray = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        typeTree = new TypeTree("Type");
        jPanel1 = new javax.swing.JPanel();
        chkPublicMember = new javax.swing.JCheckBox();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        objectTree = new ObjectTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        propTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setToolTipText("");
        jToolBar1.setMinimumSize(new java.awt.Dimension(50, 24));
        jToolBar1.setPreferredSize(new java.awt.Dimension(100, 24));

        txtTypeName.setMinimumSize(new java.awt.Dimension(120, 22));
        txtTypeName.setPreferredSize(new java.awt.Dimension(200, 24));
        jToolBar1.add(txtTypeName);

        btnNewClass.setText("型追加");
        btnNewClass.setFocusable(false);
        btnNewClass.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNewClass.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnNewClass.setMaximumSize(new java.awt.Dimension(60, 24));
        btnNewClass.setMinimumSize(new java.awt.Dimension(60, 24));
        btnNewClass.setPreferredSize(new java.awt.Dimension(80, 24));
        btnNewClass.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNewClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewClassActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNewClass);

        btnNewInstance.setText("インスタンス作成");
        btnNewInstance.setFocusable(false);
        btnNewInstance.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNewInstance.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnNewInstance.setMaximumSize(new java.awt.Dimension(120, 24));
        btnNewInstance.setMinimumSize(new java.awt.Dimension(120, 24));
        btnNewInstance.setPreferredSize(new java.awt.Dimension(120, 24));
        btnNewInstance.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNewInstance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewInstanceActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNewInstance);

        btnNewArray.setText("配列作成");
        btnNewArray.setFocusable(false);
        btnNewArray.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNewArray.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnNewArray.setMinimumSize(new java.awt.Dimension(60, 24));
        btnNewArray.setPreferredSize(new java.awt.Dimension(80, 24));
        btnNewArray.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNewArray.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewArrayActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNewArray);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        typeTree.setRowHeight(20);
        typeTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                typeTreeMouseClicked(evt);
            }
        });
        typeTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                typeTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(typeTree);

        jTabbedPane1.addTab("タイプリスト", jScrollPane1);

        jPanel1.setLayout(new java.awt.BorderLayout());

        chkPublicMember.setText("公開メンバーのみ");
        chkPublicMember.setFocusable(false);
        chkPublicMember.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        chkPublicMember.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkPublicMemberStateChanged(evt);
            }
        });
        jPanel1.add(chkPublicMember, java.awt.BorderLayout.PAGE_START);

        jSplitPane1.setDividerLocation(300);
        jSplitPane1.setDividerSize(4);

        objectTree.setRowHeight(20);
        objectTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                objectTreeMouseClicked(evt);
            }
        });
        objectTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                objectTreeValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(objectTree);

        jSplitPane1.setLeftComponent(jScrollPane2);

        propTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "名前", "型", "値"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        propTable.setRowHeight(24);
        jScrollPane3.setViewportView(propTable);
        if (propTable.getColumnModel().getColumnCount() > 0) {
            propTable.getColumnModel().getColumn(2).setCellEditor(getTableCellEditor());
        }

        jSplitPane1.setRightComponent(jScrollPane3);

        jPanel1.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("ウォッチリスト", jPanel1);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * 新規Classを追加する
     */
    private void btnNewClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewClassActionPerformed
        // TODO add your handling code here:
        String className = this.txtTypeName.getText();
        if (className.isEmpty()) {
            return;
        }
        Class<?> cls;
        TypeTree tree = (TypeTree) this.typeTree;

        try {
            cls = Class.forName(className);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, String.format("型\"%s\"が見つかりません。(%s)", className, ex.toString()));
            return;
        }

        if (Utility.addType(cls)) {
            tree.addType(cls);
        } else {
            JOptionPane.showMessageDialog(this, String.format("型\"%s\"が既に追加されました。", cls.getName()));
        }

    }//GEN-LAST:event_btnNewClassActionPerformed

    private void btnNewInstanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewInstanceActionPerformed
        String className = this.txtTypeName.getText();
        Class<?> cls;
        try {
            cls = Class.forName(className);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, String.format("型\"%s\"が見つかりません。(%s)", className, ex.toString()));
            return;
        }
        Constructor<?>[] constrs = cls.getConstructors();
        if (constrs.length == 0) {
            JOptionPane.showMessageDialog(this, String.format("型\"%s\"のインスタンスを作成できません。", className));
            return;
        }
        if (constrs.length == 1) {
            this.invokeConstructor(constrs[0]);
            return;
        }
        this.jPopupMenu1.removeAll();
        JMenuItem mnuitem;
        for (Constructor<?> constr : constrs) {
            mnuitem = new JMenuItem();
            mnuitem.setText(Utility.replacePerfix(constr.toString()));
            mnuitem.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    invokeConstructor(constr);
                }
            });
            this.jPopupMenu1.add(mnuitem);
        }
        this.jPopupMenu1.show(this, this.btnNewInstance.getX(),
                this.btnNewInstance.getY() + this.btnNewInstance.getHeight());
    }//GEN-LAST:event_btnNewInstanceActionPerformed

    private void typeTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_typeTreeValueChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_typeTreeValueChanged

    private void objectTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_objectTreeValueChanged
        // TODO add your handling code here:
        MutableTreeNode node = (MutableTreeNode) this.objectTree.getLastSelectedPathComponent();
        if (node instanceof ObjectTypeTreeNode) {
            ObjectTypeTreeNode objNode = (ObjectTypeTreeNode) node;
            if (objNode.getNodeType() == ObjectTypeTreeNode.ObjNodeType.Method) {
                this.propTable.setModel(this.CreateTableModel(null));
                return;
            }
            Object viewObj = null;
            if (objNode.getNodeType() == ObjectTypeTreeNode.ObjNodeType.Object) {
                viewObj = objNode.getInstance();
            } else if (objNode.getNodeType() == ObjectTypeTreeNode.ObjNodeType.Field) {
                try {
                    viewObj = objNode.getFieldValue();
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (objNode.getNodeType() == ObjectTypeTreeNode.ObjNodeType.ArrayItem) {
                viewObj = objNode.getArrayItem();
            }
            TypeTableModel tModel = this.CreateTableModel(viewObj);
            //add event listner 
            tModel.addReferChangeListener(new ObjectReferChangedListener() {
                @Override
                public void valueChanged(ObjectReferChangedEvent e) {
                    ObjectTree tree = (ObjectTree) objectTree;
                    objNode.removeAllChildren();
                    tree.addArrayItem(objNode, e.getObject());
                    tree.updateUI();
                }
            });

            this.propTable.setModel(tModel);
            if (propTable.getColumnModel().getColumnCount() > 0) {
                propTable.getColumnModel().getColumn(0).setCellRenderer(new TypeCellRender());
                propTable.getColumnModel().getColumn(1).setCellRenderer(new TypeCellRender());
                propTable.getColumnModel().getColumn(2).setCellEditor(getTableCellEditor());
                propTable.getColumnModel().getColumn(2).setCellRenderer(new TypeCellRender());
            }
        }
    }//GEN-LAST:event_objectTreeValueChanged

    /**
     * 配列を作成する
     */
    private void btnNewArrayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewArrayActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        String className = this.txtTypeName.getText();
        if (className.isEmpty()) {
            return;
        }
        Class<?> cls;
        if (Utility.isSampleType(className)) {
            cls = Utility.getSampleType(className);
        } else {
            try {
                cls = Class.forName(className);
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, String.format("型\"%s\"が見つかりません。", ex.getMessage()));
                return;
            }
        }
        Object arrayObj = Utility.createArray(this, cls);
        addToWatchList("", arrayObj);
    }//GEN-LAST:event_btnNewArrayActionPerformed
    /**
     * メソッドをよびだす
     */
    private void invokeMethod(Method method, Object instance) {
        Object result = null;
        if (method.getParameterCount() > 0) {
            MethodInvoke invokeForm = new MethodInvoke(this, instance, method);
            invokeForm.setMinimumSize(new Dimension(400, 400));
            Utility.displayScreenCenter(invokeForm, 400, 400);
            invokeForm.setVisible(true);
            result = invokeForm.getResult();
        } else {
            if (!method.isAccessible()) {
                method.setAccessible(true);
            }
            try {
                if (Modifier.isStatic(method.getModifiers())) {
                    result = method.invoke(null);
                } else {
                    result = method.invoke(instance);
                }
            } catch (SecurityException | IllegalAccessException ex) {
                JOptionPane.showMessageDialog(this, String.format("実行権限がありません。%s(%s)", ex.getMessage(), ex.toString()));
            } catch (IllegalArgumentException ex) {
                JOptionPane.showMessageDialog(this, String.format("パラメタが間違います。%n %s(%s)", ex.getMessage(), ex.toString()));
            } catch (InvocationTargetException ex) {
                JOptionPane.showMessageDialog(this, String.format("%s", ex.toString()));
            }
        }
        if (result != null) {
            addToWatchList(method.getName() + "の戻り値", result);
        }
    }

    private void invokeConstructor(Constructor<?> constr) {
        Object instance = null;
        String defaultName = Utility.getDefaultName(constr.getDeclaringClass());
        if (constr.getParameterCount() > 0) {
            NewInstance newInstance = new NewInstance(this, constr.getDeclaringClass(), constr);
            newInstance.setInstanceName(defaultName);
            newInstance.showNameInputArea(true);
            newInstance.setMinimumSize(new Dimension(400, 400));
            Utility.displayScreenCenter(newInstance, 400, 400);
            newInstance.setVisible(true);
            instance = newInstance.getCreatedObject();
            defaultName = newInstance.getInstanceName();
        } else {
            if (!constr.isAccessible()) {
                constr.setAccessible(true);
            }
            try {
                instance = constr.newInstance();
                defaultName = Utility.getDefaultName(instance.getClass());
            } catch (SecurityException | IllegalAccessException ex) {
                JOptionPane.showMessageDialog(this, String.format("作成権限がありません。%s(%s)", ex.getMessage(), ex.toString()));
            } catch (InstantiationException ex) {
                JOptionPane.showMessageDialog(this, String.format("インスタンスの作成ができません。%s(%s)", ex.getMessage(), ex.toString()));
            } catch (IllegalArgumentException ex) {
                JOptionPane.showMessageDialog(this, String.format("コンストラクタのパラメタが間違います。%n %s(%s)", ex.getMessage(), ex.toString()));
            } catch (InvocationTargetException ex) {
                JOptionPane.showMessageDialog(this, String.format("%s(%s)", ex.getMessage(), ex.toString()));
            }
        }
        if (instance != null) {
            this.addToWatchList(defaultName, instance);
        }
    }

    private void objectTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_objectTreeMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON3) {
            Object obj = this.objectTree.getLastSelectedPathComponent();
            if (obj instanceof ObjectTypeTreeNode) {
                Point dm = this.getLocation();
                Point pt = new Point(evt.getXOnScreen() - dm.x, evt.getYOnScreen() - dm.y);
                initPopMenuForObjectTree((ObjectTypeTreeNode) obj, pt.x, pt.y);
            }
        }
    }//GEN-LAST:event_objectTreeMouseClicked

    private void typeTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeTreeMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON3) {
            Object obj = this.typeTree.getLastSelectedPathComponent();
            if (obj instanceof TypeTreeNode) {
                Point dm = this.getLocation();
                Point pt = new Point(evt.getXOnScreen() - dm.x, evt.getYOnScreen() - dm.y);
                initPopMenuForTypeTree((TypeTreeNode) obj, pt.x, pt.y);
            }

        }
    }//GEN-LAST:event_typeTreeMouseClicked

    private void chkPublicMemberStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkPublicMemberStateChanged
        // TODO add your handling code here:
        if (this.chkPublicMember.isSelected() != ((ObjectTree) this.objectTree).isPublicMemberOnly()) {
            this.initObjectTree();
        }
    }//GEN-LAST:event_chkPublicMemberStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        String feelandLook="Metal";
        if(args.length>0){
            feelandLook=args[0];
        }
        Utility.setLookAndFeel(feelandLook);
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                MainForm mainfrm = new MainForm();
                Utility.displayScreenCenter(mainfrm, 640, 480);
                mainfrm.setVisible(true);
            }
        });
    }

    private void initControls() {
        this.chkPublicMember.setSelected(true);
        TypeTree tree = (TypeTree) this.typeTree;
        tree.clear();
        for (String key : Utility.getTypes().keySet()) {
            tree.addType(Utility.getTypes().get(key));
        }
        tree.expandRoot();
        initObjectTree();
        //PropertyTableを初期化
        this.propTable.setModel(this.CreateTableModel(null));
    }

    private void initObjectTree() {
        ObjectTree objTree = (ObjectTree) this.objectTree;
        objTree.clear();
        objTree.setPublicMemberOnly(this.chkPublicMember.isSelected());
        TreeMap<String, Object> objs = Utility.getObjects();
        for (String key : objs.keySet()) {
            objTree.addObject(key, objs.get(key));
        }
        objTree.expandRoot();
    }

    private void initPopMenuForTypeTree(TypeTreeNode node, int x, int y) {
        JMenuItem mnuitem;
        this.jPopupMenu1.removeAll();
        MainForm thisForm = this;
        switch (node.getNodeType()) {
            case Field:
                if (!node.isStatic()) {
                    return;
                }
                Object fieldValue;
                try {
                    fieldValue = node.getFieldValue();
                } catch (IllegalAccessException ex) {
                    JOptionPane.showMessageDialog(thisForm, ex.toString());
                    return;
                }
                if (fieldValue != null) {
                    mnuitem = new JMenuItem();
                    mnuitem.setText("ウォッチリストに追加");
                    mnuitem.addActionListener(new java.awt.event.ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            addToWatchList(node.getField().getName(), fieldValue);
                        }
                    });
                    this.jPopupMenu1.add(mnuitem);
                }
                break;
            case Method:
                if (!node.isStatic()) {
                    return;
                }
                Method method = node.getMethod();
                mnuitem = new JMenuItem();
                mnuitem.setText("呼び出し");
                mnuitem.addActionListener(new java.awt.event.ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        invokeMethod(method, null);
                    }
                });
                this.jPopupMenu1.add(mnuitem);
                break;
            case Constructor:
                Constructor constr = node.getConstructor();
                mnuitem = new JMenuItem();
                mnuitem.setText("インスタンスを生成する");
                mnuitem.addActionListener(new java.awt.event.ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        invokeConstructor(constr);
                    }
                });
                this.jPopupMenu1.add(mnuitem);
                break;
        }
        this.jPopupMenu1.show(this, x, y);
    }

    private void addToWatchList(String name, Object obj) {
        String keyName = Utility.addObjectList(this, name, obj);
        if (keyName == null) {
            return;
        }
        ((ObjectTree) objectTree).addObject(keyName, obj);
        ((ObjectTree) this.objectTree).expandRoot();
        this.jTabbedPane1.setSelectedIndex(1);
    }

    private void initPopMenuForObjectTree(ObjectTypeTreeNode node, int x, int y) {
        JMenuItem mnuitem;
        this.jPopupMenu1.removeAll();
        MainForm thisForm = this;
        switch (node.getNodeType()) {
            case Object:
                mnuitem = new JMenuItem();
                mnuitem.setText("名前を変更...");
                mnuitem.addActionListener(new java.awt.event.ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        String newName = JOptionPane.showInputDialog(thisForm, "名前：", node.getName());
                        if(Utility.changeKeyName(node.getName(), newName)){
                            node.setName(newName);
                            objectTree.updateUI();
                        }
                    }
                });
                this.jPopupMenu1.add(mnuitem);
                mnuitem = new JMenuItem();
                mnuitem.setText("削除");
                mnuitem.addActionListener(new java.awt.event.ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        ((DefaultTreeModel) thisForm.objectTree.getModel()).removeNodeFromParent(node);
                        Utility.getObjects().remove(node.getName());
                    }
                });
                this.jPopupMenu1.add(mnuitem);
                break;
            case Field:
                Object fieldValue;
                try {
                    fieldValue = node.getFieldValue();
                } catch (IllegalAccessException ex) {
                    JOptionPane.showMessageDialog(thisForm, ex.toString());
                    return;
                }
                if (fieldValue != null) {
                    mnuitem = new JMenuItem();
                    mnuitem.setText("ウォッチリストに追加");
                    mnuitem.addActionListener(new java.awt.event.ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            addToWatchList(node.getField().getName(), fieldValue);
                        }
                    });
                    this.jPopupMenu1.add(mnuitem);
                }
                break;
            case ArrayItem:
                int index = node.getArrayIndex();
                Object arryObj = node.getArrayItem();
                if (arryObj != null) {
                    mnuitem = new JMenuItem();
                    mnuitem.setText("ウォッチリストに追加");
                    mnuitem.addActionListener(new java.awt.event.ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            String name = node.getName() + "[" + index + "]";
                            addToWatchList(name, arryObj);
                        }
                    });
                    this.jPopupMenu1.add(mnuitem);
                }
                break;
            case Method:
                Method method = node.getMethod();
                mnuitem = new JMenuItem();
                mnuitem.setText("呼び出し");
                mnuitem.addActionListener(new java.awt.event.ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        invokeMethod(method, node.getInstance());
                    }
                });
                this.jPopupMenu1.add(mnuitem);
                break;
            default:
                break;

        }
        this.jPopupMenu1.show(this, x, y);
    }

    private TableCellEditor getTableCellEditor() {
        return new TypeCellEditor();
    }

    private TypeTableModel CreateTableModel(Object obj) {
        Object[][] modelDatas;
        if (obj != null) {
            if (!obj.getClass().isArray()) {
                Field[] flds;
                flds = obj.getClass().getDeclaredFields();
                int rowCount = flds.length;
                modelDatas = new Object[rowCount][3];
                for (int row = 0; row < rowCount; row++) {
                    modelDatas[row][0] = flds[row];
                    modelDatas[row][1] = flds[row].getType();
                    try {
                        if (!flds[row].isAccessible()) {
                            flds[row].setAccessible(true);
                        }
                        modelDatas[row][2] = flds[row].get(obj);
                    } catch (SecurityException | IllegalArgumentException | IllegalAccessException ex) {
                        modelDatas[row][2] = null;
                    }
                }
            } else {
                //Array
                Class<?> compType = obj.getClass().getComponentType();
                int length = Array.getLength(obj);
                modelDatas = new Object[length][3];
                for (int row = 0; row < length; row++) {
                    modelDatas[row][0] = row;
                    modelDatas[row][1] = compType;
                    modelDatas[row][2] = Array.get(obj, row);
                }
            }
        } else {
            modelDatas = new Object[][]{};
        }
        String[] columns = {"フィルード名", "型", "値"};
        TypeTableModel model = new TypeTableModel(obj, modelDatas, columns);
        return model;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNewArray;
    private javax.swing.JButton btnNewClass;
    private javax.swing.JButton btnNewInstance;
    private javax.swing.JCheckBox chkPublicMember;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTree objectTree;
    private javax.swing.JTable propTable;
    private javax.swing.JTextField txtTypeName;
    private javax.swing.JTree typeTree;
    // End of variables declaration//GEN-END:variables
}
