/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interpret;

import java.awt.*;
import java.awt.event.*;
import java.lang.reflect.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.tree.*;

/**
 *
 * @author macbook
 */
public class ObjectViewer extends javax.swing.JPanel {

    public enum ActionType{
        AddToWatchList,
        InvokeMethod
    }
    
    /**
     * Creates new form ObjectViewer
     */
    public ObjectViewer() {
        initComponents();
    }

    /**
     * Fields
     */
    private ActionListener addToWatchListener=null;
    private ActionListener invokeMethodListener=null;
    private Object selectedObject=null;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        objectTree = new ObjectTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        propTable = new javax.swing.JTable();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(300);
        jSplitPane1.setDividerSize(4);

        objectTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                objectTreeMouseClicked(evt);
            }
        });
        objectTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                objectTreeValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(objectTree);

        jSplitPane1.setLeftComponent(jScrollPane2);

        propTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "名前", "型", "値"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        propTable.setRowHeight(24);
        jScrollPane3.setViewportView(propTable);

        jSplitPane1.setRightComponent(jScrollPane3);

        jPanel1.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 682, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 682, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 484, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void objectTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_objectTreeMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON3) {
            Object obj = this.objectTree.getLastSelectedPathComponent();
            if (obj instanceof ObjectTypeTreeNode) {
                Point dm = this.getLocation();
                Point pt = new Point(evt.getXOnScreen() - dm.x, evt.getYOnScreen() - dm.y);
                initPopMenuForObjectTree((ObjectTypeTreeNode) obj, pt.x, pt.y);

            }
            return;
        }
    }//GEN-LAST:event_objectTreeMouseClicked

    private void objectTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_objectTreeValueChanged
        // TODO add your handling code here:
        MutableTreeNode node = (MutableTreeNode) this.objectTree.getLastSelectedPathComponent();
        if (node instanceof ObjectTypeTreeNode) {
            ObjectTypeTreeNode objNode = (ObjectTypeTreeNode) node;
            if (objNode.getNodeType() == ObjectTypeTreeNode.ObjNodeType.Method) {
                this.propTable.setModel(this.CreateTableModel(null));
                return;
            }
            Object viewObj = null;
            if (objNode.getNodeType() == ObjectTypeTreeNode.ObjNodeType.Object) {
                viewObj = objNode.getInstance();
            } else if (objNode.getNodeType() == ObjectTypeTreeNode.ObjNodeType.Field) {
                try {
                    viewObj = objNode.getFieldValue();
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (objNode.getNodeType() == ObjectTypeTreeNode.ObjNodeType.ArrayItem) {
                viewObj = objNode.getArrayItem();
            }
            this.propTable.setModel(this.CreateTableModel(viewObj));
            if (propTable.getColumnModel().getColumnCount() > 0) {
                propTable.getColumnModel().getColumn(0).setCellRenderer(new TypeCellRender());
                propTable.getColumnModel().getColumn(1).setCellRenderer(new TypeCellRender());
                propTable.getColumnModel().getColumn(2).setCellEditor(new TypeCellEditor());
                propTable.getColumnModel().getColumn(2).setCellRenderer(new TypeCellRender());
            }
        }
    }//GEN-LAST:event_objectTreeValueChanged

  private DefaultTableModel CreateTableModel(Object obj) {
        Object[][] modelDatas;
        if (obj != null) {
            if (!obj.getClass().isArray()) {
                Field[] flds = obj.getClass().getDeclaredFields();
                int rowCount = flds.length;
                modelDatas = new Object[rowCount][3];
                for (int row = 0; row < rowCount; row++) {
                    modelDatas[row][0] = flds[row];
                    modelDatas[row][1] = flds[row].getType();
                    try {
                        if (!flds[row].isAccessible()) {
                            flds[row].setAccessible(true);
                        }
                        modelDatas[row][2] = flds[row].get(obj);
                    } catch (SecurityException | IllegalArgumentException | IllegalAccessException ex) {
                        modelDatas[row][2] = null;
                    }
                }
            } else {
                //Array
                Class<?> compType = obj.getClass().getComponentType();
                int length = Array.getLength(obj);
                modelDatas = new Object[length][3];
                for (int row = 0; row < length; row++) {
                    modelDatas[row][0] = row;
                    modelDatas[row][1] = compType;
                    modelDatas[row][2] = Array.get(obj, row);
                }
            }
        } else {
            modelDatas = new Object[][]{};
        }
        String[] columns = {"フィルード名", "型", "値"};
        DefaultTableModel model = new TypeTableModel(obj, modelDatas, columns);
        return model;
    }
      private void initPopMenuForObjectTree(ObjectTypeTreeNode node, int x, int y) {
        JMenuItem mnuitem = null;
        Window thisForm = Utility.getParentWindow(this);
        ObjectViewer myPanel=this;
        this.jPopupMenu1.removeAll();
        switch (node.getNodeType()) {
            case Object:
                mnuitem = new JMenuItem();
                mnuitem.setText("変更...");
                mnuitem.addActionListener(new java.awt.event.ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        ObjectViewer viewer =new ObjectViewer();
                        viewer.addActionListener(ActionType.AddToWatchList, myPanel.addToWatchListener);
                        viewer.addActionListener(ActionType.InvokeMethod, myPanel.invokeMethodListener);
                        JDialog dialog =new JDialog();
                        dialog.getContentPane().add(viewer);
                        Utility.displayScreenCenter(thisForm, thisForm.getWidth(), thisForm.getHeight());
                    }
                });
                break;
            case Field:
                Object fieldValue;
                try {
                    fieldValue = node.getFieldValue();
                } catch (IllegalAccessException ex) {
                    JOptionPane.showMessageDialog(thisForm, ex.toString());
                    return;
                }
                if (fieldValue != null) {
                    mnuitem = new JMenuItem();
                    mnuitem.setText("変更...");
                    mnuitem.addActionListener(new java.awt.event.ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            JOptionPane.showMessageDialog(thisForm, "変更");
                        }
                    });
                    this.jPopupMenu1.add(mnuitem);
                    mnuitem = new JMenuItem();
                    mnuitem.setText("ウォッチリストに追加");
                    mnuitem.addActionListener(this.addToWatchListener);
                    this.jPopupMenu1.add(mnuitem);
                }
                break;
            case Method:
                Method method = node.getMethod();
                mnuitem = new JMenuItem();
                mnuitem.setText("呼び出し");
                mnuitem.addActionListener(this.invokeMethodListener);
                this.jPopupMenu1.add(mnuitem);
                break;
            default:
                break;

        }
        this.jPopupMenu1.show(this, x, y);
    }

    /**
     * Event listenerを追加する 
     * @param action
     * @param listener
     */
    public void addActionListener(ActionType action ,ActionListener listener){
        switch(action){
            case AddToWatchList:
                this.addToWatchListener=listener;
                return;
            case InvokeMethod:
                this.invokeMethodListener=listener;
                return ;
            default:
        }
        return;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTree objectTree;
    private javax.swing.JTable propTable;
    // End of variables declaration//GEN-END:variables
}
