/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package digitalclock;

import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.geom.Rectangle2D;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import java.util.Timer;
import javax.swing.ButtonGroup;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JRadioButtonMenuItem;
/**
 *
 * @author macbook
 */
public class ClockMainForm extends Frame {
    private static final long serialVersionUID = 1L;

    /**
     * Creates new form ClockMainForm
     */
    public ClockMainForm() {
        super();
        initComponents();
        initControl();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menuItem1 = new java.awt.MenuItem();
        menuItem2 = new java.awt.MenuItem();

        jPopupMenu1.setAutoscrolls(true);
        jPopupMenu1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        setBounds(new java.awt.Rectangle(0, 22, 200, 100));
        setUndecorated(true);
        setTitle("デジタル時計");
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        setLayout(null);

        menu1.setActionCommand("mnuSetting");
        menu1.setLabel("設定");
        menu1.setName("");
        menu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu1ActionPerformed(evt);
            }
        });

        menuItem1.setActionCommand("propertySetting");
        menuItem1.setLabel("属性");
        menuItem1.setName("");
        menuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem1ActionPerformed(evt);
            }
        });
        menu1.add(menuItem1);
        menu1.addSeparator();
        menuItem2.setLabel("閉じる");
        menuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem2ActionPerformed(evt);
            }
        });
        menu1.add(menuItem2);

        menuBar1.add(menu1);
        menu1.getAccessibleContext().setAccessibleName("munSetting");
        menu1.getAccessibleContext().setAccessibleDescription("");

        setMenuBar(menuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**内部変数*/
    private Graphics graphicBuffer=null;
    private Image bufferImage=null;
    ClockSettings setInfo=new ClockSettings();
    boolean isCaptured = false;
    Window window =null;
    Point startPt = new Point();
    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void initControl(){
        //this.add(popupMenu1);
        //this.add(jPopupMenu1);
        this.setInfo.fontName =this.getFont().getFamily(Locale.JAPAN);
        initPopMenu();
        this.setMenuBar(null);
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        beginDrawClock();  
    }//GEN-LAST:event_formWindowOpened

    private void menu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu1ActionPerformed
     
    }//GEN-LAST:event_menu1ActionPerformed

    @Override
    public void update(Graphics grphcs) {
        super.update(grphcs); //To change body of generated methods, choose Tools | Templates.
        drawClock(grphcs);
    }

    private void menuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem1ActionPerformed
        // TODO add your handling code here:
     String cmd = evt.getActionCommand();
     if(cmd.equals("propertySetting")){
         //属性設定
        ClockMainForm mainForm=this;
        PropertyDialog dialog = new PropertyDialog(this,this.setInfo.clone(), true);
        int x = this.getX() + this.getWidth() +5;
        int y = this.getY() ;
        dialog.setBounds(x,y,dialog.Init_Width,dialog.Init_Height);
        dialog.setResizable(false);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                //OKの場合再適用
                mainForm.setInfo=dialog.getClockInfo();
                mainForm.resetWindowSize();
                mainForm.repaint();
                dialog.setVisible(false);
                dialog.dispose();
            }

        });
        dialog.setVisible(true);
     }
    }//GEN-LAST:event_menuItem1ActionPerformed

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        if(evt.getButton()==MouseEvent.BUTTON3){
            this.jPopupMenu1.show(this, evt.getX(),evt.getY());
            return;
        }
        if(evt.getButton()==MouseEvent.BUTTON1){
            this.isCaptured=true;
            startPt.setLocation( evt.getPoint());
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // TODO add your handling code here:
        if(evt.getButton()==MouseEvent.BUTTON1){
            this.isCaptured =false;
        }   
    }//GEN-LAST:event_formMouseReleased

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
       // if(evt.getButton()==MouseEvent.BUTTON1){
        if(!this.isCaptured){
            return;
        }
        if(window==null){
            window =(Window)evt.getComponent(); 
        }
        Point localPos = evt.getLocationOnScreen();
        window.setLocation(localPos.x - startPt.x,localPos.y - startPt.y);
    }//GEN-LAST:event_formMouseDragged

    private void menuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_menuItem2ActionPerformed

    //フォントを選択される場合
    private void fontActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        String fontName = evt.getActionCommand();
        this.setInfo.fontName=fontName;
        resetWindowSize();
        this.repaint();
    } 
    
    //文字色を選択される場合
    private void colorActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
       String colorName =evt.getActionCommand();
       this.setInfo.color= NamedColor.valueOf(colorName);
       resetWindowSize();
       this.repaint();
    } 

    //背景色を選択される場合
    private void bkColorActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
       String colorName =evt.getActionCommand();
       this.setInfo.backColor= NamedColor.valueOf(colorName);
       resetWindowSize();
       this.repaint();
    } 

     //サイズを選択される場合
    private void sizeActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
       int size = Integer.parseInt(evt.getActionCommand());
       this.setInfo.fontSize = size ;
       resetWindowSize();
       this.repaint();
    } 
    
     //時刻フォーマットを選択される場合
    private void formatActionPerformed(java.awt.event.ActionEvent evt) {   
        // TODO add your handling code here:
       String fmt = evt.getActionCommand();
       this.setInfo.dateFormat = fmt ;
       resetWindowSize();
       this.repaint();
    } 
     //太字を選択される場合
    private void boldActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
       this.setInfo.Bold = !this.setInfo.Bold;
       resetWindowSize();
       this.repaint();
    } 
    //半透明を選択される場合
    private void OpacityActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
      this.setOpacity(this.getOpacity()<1?1.0f:0.5f);
       //this.setAlwaysOnTop((this.getOpacity() < 1));
       resetWindowSize();
       this.repaint();
    } 
     //半透明を選択される場合
    private void alwayTopActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
      this.setAlwaysOnTop(!this.isAlwaysOnTop());
      resetWindowSize();
      this.repaint();
    } 
    private boolean isOpacitiable(){
      GraphicsDevice gd =  GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
      return gd.isWindowTranslucencySupported(GraphicsDevice.WindowTranslucency.TRANSLUCENT);
    }
     //閉じる
    private void closeActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        System.exit(0);
    } 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            ClockMainForm mainForm = new ClockMainForm();
            mainForm.setMaximizedBounds(new Rectangle(250, 120));
            mainForm.setBounds(200,200,250,120);
            mainForm.setVisible(true);
        });
    }

    @Override
    public void paint(Graphics g) {
       super.paint(g); //To change body of generated methods, choose Tools | Templates.
       drawClock(g);
   }

   private void beginDrawClock(){
        resetWindowSize();
        Timer timer=new Timer();
        PaintTask task = new PaintTask(this);
        timer.schedule(task, 0,200);
   }
   
   void resetWindowSize(){
       SimpleDateFormat fmt = new SimpleDateFormat(this.setInfo.dateFormat);
       Date now =  new Date();
       String nowTime =fmt.format(now);
       int fontAttr = setInfo.Bold? Font.BOLD:Font.PLAIN;
       Font font =new Font(setInfo.fontName,fontAttr,setInfo.fontSize);
       Graphics g=this.getGraphics();
       g.setFont(font);
       Dimension dm  =getStringBounds(g,nowTime);
       this.setSize(dm.width+20 ,dm.height+20);
   }
   
   private Dimension getStringBounds(Graphics g,String buffer){
        //Font font =new Font(setInfo.fontName,Font.BOLD,setInfo.fontSize);
       
        FontMetrics fm = g.getFontMetrics();
        Rectangle2D strRect =fm.getStringBounds(buffer,g);
        strRect.add(20, 10);
        Dimension dm = new Dimension();
        dm.setSize(strRect.getWidth(),strRect.getHeight());
        return dm;
   }
   
   private void drawClock(Graphics g){
        Rectangle rect = g.getClipBounds();
        g.clearRect(rect.x,rect.y,rect.width,rect.height);
        SimpleDateFormat fmt = new SimpleDateFormat(this.setInfo.dateFormat);
        Date now =  new Date();
        String nowTime =fmt.format(now);
        int fontAttr = setInfo.Bold? Font.BOLD:Font.PLAIN;
        Font font =new Font(setInfo.fontName,fontAttr,setInfo.fontSize);
        g.setFont(font);
        Dimension dm  = getStringBounds(g,nowTime);
        double x = rect.getCenterX()- (dm.width /2);
        double y;
        if(this.getMenuBar()!=null){
           // y= rect.getCenterY()+(dm.height/2)-25  ;
             y= rect.getCenterY()+(dm.height*0.40);
        }else{
          //  y= rect.getCenterY()+(dm.height/2)-35;
            y= rect.getCenterY()+(dm.height* 0.32);
        }
        //double top= rect.getCenterY()-(strRect.getHeight()/2);
        g.setColor(setInfo.backColor.color());
        g.fillRect(0, 0, (int)rect.getWidth(), (int)rect.getHeight());
        g.setColor(setInfo.color.color());
        g.drawString(nowTime, (int)x, (int)y);
   } 
   
   private void initPopMenu(){
       ButtonGroup btnGroup;
       JRadioButtonMenuItem mnuitem;
       JMenu fontMenu = new JMenu();
       fontMenu.setActionCommand("fontMenu");
       fontMenu.setText("フォント");
       fontMenu.setAutoscrolls(true);
       //font一覧
       btnGroup =new ButtonGroup();
       Font[] fonts= GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();
       ArrayList<String> ftList=new ArrayList<>();
       for(Font ft:fonts){
            String fontFamily =ft.getFamily(Locale.JAPAN);
            if(!ftList.contains(fontFamily) && ft.canDisplay('後') ){
                ftList.add(fontFamily);
                mnuitem= new JRadioButtonMenuItem();
                mnuitem.setText(fontFamily);
                mnuitem.setFont(new java.awt.Font(fontFamily, 0, 12));
                mnuitem.setActionCommand(fontFamily);
                mnuitem.setSelected(fontFamily.equals(this.setInfo.fontName));
                mnuitem.addActionListener(this::fontActionPerformed);
                mnuitem.setAutoscrolls(true);
                btnGroup.add(mnuitem);
                fontMenu.add(mnuitem);
            }
      }
       JMenu colorMenu = new JMenu();
       colorMenu.setActionCommand("colorMenu");
       colorMenu.setText("文字色");
       //色一覧
      btnGroup =new ButtonGroup();
      for(NamedColor color : NamedColor.values()){
          mnuitem=new JRadioButtonMenuItem();
          mnuitem.setText(color.name());
          mnuitem.setBackground(color.color());
          mnuitem.setActionCommand(color.name());
          mnuitem.setSelected(color==this.setInfo.color);
          mnuitem.addActionListener(this::colorActionPerformed);
          mnuitem.getAccessibleContext();
          btnGroup.add(mnuitem);
          colorMenu.add(mnuitem);
      }
      //背景色
      JMenu bkColorMenu = new JMenu();
      bkColorMenu.setActionCommand("bkColorMenu");
      bkColorMenu.setText("背景色");
       btnGroup =new ButtonGroup();
      for(NamedColor color : NamedColor.values()){
          mnuitem=new JRadioButtonMenuItem();
          mnuitem.setText(color.name());
          mnuitem.setBackground(color.color());
          mnuitem.setSelected(color==this.setInfo.backColor);
          mnuitem.setActionCommand(color.name());
          mnuitem.addActionListener(this::bkColorActionPerformed);
          btnGroup.add(mnuitem);
          bkColorMenu.add(mnuitem);
      }
       //サイズ
      JMenu sizeMenu = new JMenu();
      sizeMenu.setActionCommand("sizeMenu");
      sizeMenu.setText("サイズ");
      int[] sizes={8,9,10,11,12,14,16,18,22,24,26,28,36,48,72,108};
      btnGroup =new ButtonGroup();
      for(int size :sizes){
          mnuitem=new JRadioButtonMenuItem();
          mnuitem.setText(Integer.toString(size)); 
          mnuitem.setActionCommand(Integer.toString(size));
          mnuitem.setSelected(this.setInfo.fontSize==size);
          mnuitem.addActionListener(this::sizeActionPerformed);
          btnGroup.add(mnuitem);
          sizeMenu.add(mnuitem);
      }
      //フォーマット
      JMenu fmtMenu = new JMenu();
      fmtMenu.setActionCommand("fmtMenu");
      fmtMenu.setText("時刻形式");
      String[] fmts={"H:mm","HH:mm","h:mm a","hh:mm a","H:mm:ss","HH:mm:ss","h:mm:ss a","hh:mm:ss a"};
      btnGroup =new ButtonGroup();
      for(String fmt :fmts){
          mnuitem=new JRadioButtonMenuItem();
          mnuitem.setText(fmt);  
          mnuitem.setActionCommand(fmt);
          mnuitem.setSelected(this.setInfo.dateFormat.equals(fmt));
          mnuitem.addActionListener(this::formatActionPerformed);
          btnGroup.add(mnuitem);
          fmtMenu.add(mnuitem);
      }
      //Bold
       JCheckBoxMenuItem chkBold =new JCheckBoxMenuItem();
       chkBold.setText("太字");
       chkBold.setState(this.setInfo.Bold);
       chkBold.addActionListener(this::boldActionPerformed);
        //半透明
        JCheckBoxMenuItem chkTransp =null;
        if(this.isOpacitiable()){
            chkTransp =new JCheckBoxMenuItem();
            chkTransp.setText("半透明");
            chkTransp.setState(this.getOpacity()<1.0f);
            chkTransp.addActionListener(this::OpacityActionPerformed);
       }
       //Alway On Top
        JCheckBoxMenuItem chkAlwayTop=null;
        if(this.isAlwaysOnTopSupported()){
            chkAlwayTop =new JCheckBoxMenuItem();
            chkAlwayTop.setText("常にトップ表示");
            chkAlwayTop.setState(this.isAlwaysOnTop());
            chkAlwayTop.addActionListener(this::alwayTopActionPerformed);
        }
       //Close
      JMenuItem closeMenu = new JMenuItem();
      closeMenu.setActionCommand("closeMenu");
      closeMenu.setText("閉じる");
      closeMenu.addActionListener(this::closeActionPerformed );
      //フォントサイズ
      jPopupMenu1.add(fontMenu);
      jPopupMenu1.add(sizeMenu);
      jPopupMenu1.add(colorMenu);
      jPopupMenu1.add(bkColorMenu);
      jPopupMenu1.add(fmtMenu);
      jPopupMenu1.addSeparator();
      jPopupMenu1.add(chkBold);
      if(chkTransp!=null){
        jPopupMenu1.add(chkTransp);
      }
      if(chkAlwayTop!=null){
          jPopupMenu1.add(chkAlwayTop);
      }
      jPopupMenu1.addSeparator();
      jPopupMenu1.add(closeMenu);
      
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu jPopupMenu1;
    private java.awt.Menu menu1;
    private java.awt.MenuBar menuBar1;
    private java.awt.MenuItem menuItem1;
    private java.awt.MenuItem menuItem2;
    // End of variables declaration//GEN-END:variables

}
